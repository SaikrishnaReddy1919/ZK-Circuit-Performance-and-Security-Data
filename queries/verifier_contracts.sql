
-- This code is designed to:
-- 1. Collect all transactions and traces which are used
--    verify zk proofs on Ethereum. 
-- 2. Group them by verifier contract address

-- On traces vs tx:
-- Transactions and Traces can both call functions of deployed smart contracts and 
-- deploy new smart contracts.  The diff is that transactions are the intitiaters and
-- traces are functions called by smart contracts which have already been called by 
-- a transaction (or a trace). So essentially it goes tx first which can then call 
-- traces.

-- On tx methods:
-- These method IDs (in hex) are generated by Keccak256 hashing the function call in 
-- the following format (as an example): 
-- verifyBlocks(uint32,uint32,uint256[],uint256[],uint256[],bytes[])
-- the names of the inputs and space around them are discarded.
-- The first 8 characters + 0x are then used as the method ID in the function call.
-- While it is possible that there are either conflicting method IDs, or the same 
-- method ID being used for multiple purposes these were realtively clean.

WITH traces as (
  SELECT 
    *,
    "Groth16" as type
  FROM `bigquery-public-data.crypto_ethereum.traces`
  WHERE LEFT(input,10) = "0x695ef6f9"
  UNION ALL
  SELECT 
    *,
    "Plonk/Turbo_Plonk" as type
  FROM `bigquery-public-data.crypto_ethereum.traces`
  WHERE LEFT(input,10) = "0xac318c5d"
  UNION ALL
  SELECT 
    *,
    "PLONK_(zkSync/swap)" as type
  FROM `bigquery-public-data.crypto_ethereum.traces`
  WHERE LEFT(input,10) = "0xa830bd60"
  OR LEFT(input,10) = "0x7756aa8a"
  UNION ALL
  SELECT 
    *,
    "Hermez" as type
  FROM `bigquery-public-data.crypto_ethereum.traces`
  WHERE LEFT(input,10) = "0xa830bd60"
),

txs as (  
  SELECT 
    *,
    "StarkWare (STARK/FRI)" as type
  FROM `bigquery-public-data.crypto_ethereum.transactions`
  WHERE LEFT(input,10) = "0x9b3b76cc"
  UNION ALL
  SELECT 
    *,
    "Groth16(LoopRing)" as type
  FROM `bigquery-public-data.crypto_ethereum.transactions`
  WHERE LEFT(input,10) = "0x4be6b36a"
),

-- Here we group the txns and traces by the verifier contract address.
-- We also get the first transaction timestamp, the average gas used
-- the method ID, and the method type
combine_tx_traces as (
  SELECT 
    to_address as verifier_contract,
    MIN(t.block_timestamp) as first_txn,  --using min since they are all equal
    ROUND(avg(t.gas_used)) as avg_gas_used,
    MAX(LEFT(t.input,10)) as method_ID,
    MAX(type) as snark_type,
    "Internal (trace)" as method_type,
    COUNT(*) AS num_contract_calls
  FROM traces t
  GROUP BY to_address
  UNION ALL
  SELECT 
    to_address as verifier_contract,
    MIN(t.block_timestamp) as first_txn, --using min since they are all equal
    ROUND(avg(t.receipt_gas_used)) as avg_gas_used,
    MAX(LEFT(t.input,10)),
    MAX(type),
    "External (transaction)",
    COUNT(*)
  FROM txs t
  GROUP BY to_address
  ),

-- Left join the data from es_bytecode table into the verifier address table
-- This data was manually pulled from Etherscan Data
add_es as (
  SELECT 
    *
  FROM combine_tx_traces c
  LEFT JOIN `starlit-sandbox-349500.snark_contracts.es_bytecode` b 
  ON b.contract_address = c.verifier_contract
  ),
-- Left join the contract data for each verifier contract
add_contract_data as (
  SELECT
    verifier_contract,
    first_txn,
    avg_gas_used,
    method_ID,
    snark_type,
    method_type,
    num_contract_calls,
    contract_name,
    contract_author,
    es_tag,
    identity,
    public_es,
    verifier_contract as contract_address,
    c.block_timestamp as creation_time,
    NULL as transaction_hash_creation,
    NULL as deployed_by_address,
    num_contract_transactions,
    a.contract_abi as contract_ABI,
    c.bytecode as runtime_bytecode
  FROM add_es a
  LEFT JOIN `bigquery-public-data.crypto_ethereum.contracts` c
  ON c.address = a.verifier_contract
  ),

-- Left Join the first transactions data for each verifing contract
-- Need to group them in order to only have the first tx data (and sort that by lowest tx position)
add_transaction_data as (
  SELECT
    verifier_contract,
    first_txn,
    avg_gas_used,
    method_ID,
    snark_type,
    method_type,
    num_contract_calls,
    contract_name,
    contract_author,
    es_tag,
    identity,
    public_es,
    contract_address,
    creation_time,
    t.transaction_index,
    FIRST_VALUE(t.hash) OVER (PARTITION BY verifier_contract ORDER BY transaction_index) as transaction_hash_creation,
    FIRST_VALUE(t.from_address) OVER (PARTITION BY verifier_contract ORDER BY transaction_index) as deployed_by_address,
    a.num_contract_transactions, 
    a.contract_ABI, 
    runtime_bytecode,
    FIRST_VALUE(t.input) OVER (PARTITION BY verifier_contract ORDER BY transaction_index) as input_bytecode
  FROM add_contract_data a
  LEFT JOIN `bigquery-public-data.crypto_ethereum.transactions` t
  ON t.to_address = a.verifier_contract
  )

SELECT
    verifier_contract,
    MIN(first_txn),
    MAX(avg_gas_used),
    MAX(method_ID),
    MAX(snark_type),
    MAX(method_type),
    MAX(num_contract_calls),
    MAX(contract_name),
    MAX(contract_author),
    MAX(es_tag),
    MAX(identity),
    MAX(public_es),
    MAX(contract_address),
    MAX(creation_time),
    MAX(transaction_hash_creation),
    MAX(deployed_by_address),
    MAX(num_contract_transactions), 
    MAX(contract_ABI), 
    MAX(runtime_bytecode),
    MAX(input_bytecode) 
FROM add_transaction_data
GROUP BY verifier_contract